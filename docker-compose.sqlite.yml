
services:
  backend-sqlite:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: userinfo_backend_sqlite
    # Mount the database file into the container from the host
    # This makes the SQLite DB persistent on the host machine
    volumes:
      - ./user_info_sqlite.db:/app/user_info.db # Mount host DB file to container path
    environment:
      # Set DATABASE_URL for SQLite inside the container
      # The path should match where the volume is mounted inside the container
      DATABASE_URL: "sqlite+aiosqlite:///app/user_info.db"
      # You can add other env vars like SECRET_KEY here if not baked into the image
      # SECRET_KEY: "your_secret_key_for_sqlite_compose"
      BACKEND_PORT: 8001 # Informational, actual port set in Dockerfile CMD/EXPOSE
    ports:
      # Map host port 8001 to container port 8001
      - "8001:8001"
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: userinfo_frontend
    ports:
      # Map host port 3000 to container port 3000
      - "3000:3000"
    # Ensure frontend waits for backend if needed (basic check)
    # depends_on:
    #   - backend-sqlite # Simple dependency, doesn't guarantee backend is fully ready
    environment:
      # If your frontend needs to know the backend URL at runtime:
      # NEXT_PUBLIC_API_URL: http://backend-sqlite:8001/api # Use service name for inter-container communication
      # Note: If API calls are purely client-side, it needs the host-accessible URL (e.g., http://localhost:8001/api)
      # This often requires configuring the base URL in your frontend code based on the environment.
      NODE_ENV: production
    restart: unless-stopped

# Note: If you run this, a file named 'user_info_sqlite.db' will be created
# in the same directory as this docker-compose file on your host machine.